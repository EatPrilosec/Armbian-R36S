#!/bin/bash



# disable autologin
rm -f /etc/systemd/system/getty@.service.d/override.conf
rm -f /etc/systemd/system/serial-getty@.service.d/override.conf
systemctl daemon-reload

echo -e "\nWaiting for system to finish booting ..."
systemctl is-system-running --wait > /dev/null

if
    systemctl is-enabled --quiet NetworkManager &&
    ! systemctl is-enabled --quiet NetworkManager-wait-online
then
    systemctl enable NetworkManager-wait-online
    # @TODO: determine if there is any value in starting it now
    echo "Waiting for network startup to complete..."
    systemctl start NetworkManager-wait-online
fi

if
    systemctl is-enabled --quiet systemd-networkd &&
    ! systemctl is-enabled --quiet systemd-networkd-wait-online
then
    systemctl enable systemd-networkd-wait-online
    # @TODO: determine if there is any value in starting it now
    echo "Waiting for network startup to complete..."
    systemctl start systemd-networkd-wait-online
fi

chmod +x /etc/update-motd.d/*
echo -e "\nWaiting for system to finish booting ..." setting stuffs

[[ -f /boot/u-boot/firstrun_overrides.txt ]] && source /boot/u-boot/firstrun_overrides.txt

# set root pass
[[ -z "$rootpass" ]] && rootpass=r36s
(
    echo "$rootpass"
    echo "$rootpass"
) | passwd root > /dev/null 2>&1

# make user
[[ -z "$username" ]] && username=r36s
[[ -z "$FancyUserName" ]] && FancyUserName=R36S
adduser --quiet --disabled-password --home /home/"$username" --gecos "$FancyUserName" "$username"

# set user pass
[[ -z "$userpass" ]] && userpass=r36s
(
    echo "$userpass"
    echo "$userpass"
) | passwd "$username" > /dev/null 2>&1

RealUserName=$username

for additionalgroup in sudo netdev audio video disk tty users games dialout plugdev input bluetooth systemd-journal ssh render; do
    usermod -aG "${additionalgroup}" "${RealUserName}" 2> /dev/null
done

touch /home/"$RealUserName"/.Xauthority
chown "$RealUserName":"$RealUserName" /home/"$RealUserName"/.Xauthority
RealName="$(awk -F":" "/^${RealUserName}:/ {print \$5}" < /etc/passwd | cut -d',' -f1)"
[ -z "$RealName" ] && RealName="$RealUserName"
echo -e "\nDear \e[0;92m${RealName}\x1B[0m, your account \e[0;92m${RealUserName}\x1B[0m has been created and is sudo enabled."
echo -e "Please use this account for your daily work from now on.\n"
rm -f /root/.not_logged_in_yet
# set up profile sync daemon on desktop systems
if command -v psd > /dev/null 2>&1; then
    echo -e "${RealUserName} ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" >> /etc/sudoers
    touch /home/"${RealUserName}"/.activate_psd
    chown "$RealUserName":"$RealUserName" /home/"${RealUserName}"/.activate_psd
fi

mkdir -p /etc/lightdm/lightdm.conf.d
cat <<- EOF > /etc/lightdm/lightdm.conf.d/22-armbian-autologin.conf
    [Seat:*]
    autologin-user=$RealUserName
    autologin-user-timeout=0
    user-session=xfce
EOF
ln -sf /lib/systemd/system/lightdm.service /etc/systemd/system/display-manager.service

# set wifi
[[ -z "$ssid" ]] && ssid=WiFi
[[ -z "$wifipass" ]] && wifipass=asuhdude
WIFI_DEVICE=$(LC_ALL=C iw dev | awk '$1=="Interface"{print $2}' 2> /dev/null)

cat <<- EOF > /etc/netplan/30-wifis-dhcp.yaml
# Created by Armbian firstlogin script
network:
  wifis:
    ${WIFI_DEVICE}:
      dhcp4: yes
      dhcp6: yes
      access-points:
        "$ssid":
         password: "${wifipass}"
EOF
chmod 600 /etc/netplan/30-wifis-dhcp.yaml

# apply to netplan
systemctl daemon-reload
netplan apply --timeout 0 2>/dev/null

# set timezone
[[ -z "$timezone" ]] && timezone='America/New_York'
timedatectl set-timezone "${timezone}"
dpkg-reconfigure --frontend=noninteractive tzdata > /dev/null 2>&1

# set locale
[[ -z "$locale" ]] && locale=en_US.UTF-8
sed -i "s/=.*/=$locale/g" /etc/default/locale
sed -i 's/# '"${locale}"'/'"${locale}"'/' /etc/locale.gen
echo -e "Generating locales: \x1B[92m${locale}\x1B[0m"
locale-gen "${locale}" > /dev/null 2>&1

DevPart=$(blkid |grep armbian |cut -d: -f1)
PartNum=$(echo ${DevPart} | cut -dp -f2)
Dev=$(echo ${DevPart} | cut -dp -f1)

if [[ -f /boot/u-boot/dontexpand ]]
then
    rm -f /boot/u-boot/dontexpand
else
    DevPart=$(blkid |grep armbian |cut -d: -f1)
    PartNum=$(echo ${DevPart} | cut -dp -f2)
    Dev=$(echo ${DevPart} | cut -dp -f1)
    parted --script --fix $Dev resizepart $PartNum 100%
    resize2fs -f $DevPart
    reboot
fi

echo -e "\n\e[1m\e[39mNow starting desktop environment...\x1B[0m\n"
sleep 1
service lightdm start 2> /dev/null
who -la | grep root | grep -q tty1 && exit 1

exit 0